const { 
  sequelize, 
  Categories, 
  Unites, 
  Utilisateurs, 
  Clients, 
  Vendeurs 
} = require('../models');
const bcrypt = require('bcryptjs');

// Variable globale pour √©viter les initialisations multiples dans la m√™me session
let isInitialized = false;

const initRailwayData = async () => {
  // √âviter les initialisations multiples dans la m√™me session
  if (isInitialized) {
    console.log('‚ÑπÔ∏è Initialisation d√©j√† effectu√©e dans cette session.');
    return;
  }

  try {
    console.log('üöÄ V√©rification des donn√©es de base sur Railway...');

    // V√©rifier si les donn√©es existent d√©j√†
    const categoriesCount = await Categories.count();
    const unitesCount = await Unites.count();
    const adminExists = await Utilisateurs.findOne({ 
      where: { email: 'dahlawi@gmail.com' } 
    });

    // Si toutes les donn√©es existent d√©j√†, ne rien faire
    if (categoriesCount >= 6 && unitesCount >= 7 && adminExists) {
      console.log('‚úÖ Toutes les donn√©es de base existent d√©j√†. Aucune initialisation n√©cessaire.');
      isInitialized = true;
      return;
    }

    console.log('üìù Initialisation des donn√©es manquantes...');

    // Cr√©er les cat√©gories si elles n'existent pas
    const categories = [
      { nom: 'Bois' },
      { nom: '√âlectricit√©' },
      { nom: 'Plomberie' },
      { nom: 'Isolation' },
      { nom: 'Peinture' },
      { nom: 'S√©curit√©' }
    ];
    
    for (const categorie of categories) {
      await Categories.findOrCreate({
        where: { nom: categorie.nom },
        defaults: categorie
      });
    }
    console.log('‚úÖ Cat√©gories v√©rifi√©es/cr√©√©es');

    // Cr√©er les unit√©s si elles n'existent pas
    const unites = [
      { nom: 'M√®tre', symbole: 'm' },
      { nom: 'Pi√®ce', symbole: 'pcs' },
      { nom: 'Bobine', symbole: 'bob' },
      { nom: 'M√®tre carr√©', symbole: 'm¬≤' },
      { nom: 'Rouleau', symbole: 'roul' },
      { nom: 'Litre', symbole: 'L' },
      { nom: 'Pot', symbole: 'pot' },
    ];
    
    for (const unite of unites) {
      await Unites.findOrCreate({
        where: { nom: unite.nom, symbole: unite.symbole },
        defaults: unite
      });
    }
    console.log('‚úÖ Unit√©s v√©rifi√©es/cr√©√©es');

    // Cr√©er un utilisateur admin par d√©faut s'il n'existe pas
    if (!adminExists) {
      const adminUser = await Utilisateurs.create({
        nom: 'dahlawi',
        email: 'dahlawi@gmail.com',
        password_hash: '123456',
        role: 'admin',
        telephone: '+269 434 00 04'
      });
      console.log('‚úÖ Utilisateur admin cr√©√©');
    } else {
      console.log('‚ÑπÔ∏è Utilisateur admin existe d√©j√†');
    }

    isInitialized = true;
    console.log('üéâ Initialisation termin√©e avec succ√®s !');
  } catch (error) {
    console.error('‚ùå Erreur lors de l\'initialisation :', error);
    throw error; // Propager l'erreur au lieu d'arr√™ter le processus
  }
};

// Fermer la connexion seulement si le script est ex√©cut√© directement
if (require.main === module) {
  initRailwayData()
  .then(() => {
    console.log('‚úÖ Script termin√© avec succ√®s');
    return sequelize.close();
  })
  .catch((error) => {
    console.error('‚ùå Erreur:', error);
    process.exit(1);
  });
}

module.exports = initRailwayData; 